name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: 'false'
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'DbfSharp.Console/DbfSharp.Console.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/TestResults/**/*.xml'

      - name: Upload coverage reports
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: '**/TestResults/**/coverage.cobertura.xml'

  build-executables:
    name: Build Executables
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target_os: windows
            arch: x64
            runtime: win-x64
            extension: .exe

          - target_os: windows
            arch: arm64
            runtime: win-arm64
            extension: .exe
          
          # macOS
          - target_os: macos
            arch: x64
            runtime: osx-x64
            extension: ''

          - target_os: macos
            arch: arm64
            runtime: osx-arm64
            extension: ''
          
          # Linux
          - target_os: linux
            arch: x64
            runtime: linux-x64
            extension: ''

          - target_os: linux
            arch: arm64
            runtime: linux-arm64
            extension: ''
          
          # Linux musl (Alpine)
          - target_os: linux-musl
            arch: x64
            runtime: linux-musl-x64
            extension: ''

          - target_os: linux-musl
            arch: arm64
            runtime: linux-musl-arm64
            extension: ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-dev.${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Publish self-contained executable
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            --output "./publish/${{ matrix.runtime }}" \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -p:TrimMode=partial \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:DebugType=none \
            -p:DebugSymbols=false \
            -p:Version=${{ steps.version.outputs.version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -p:FileVersion=${{ steps.version.outputs.version }}

      - name: Create archive name
        id: archive
        run: |
          ARCHIVE_NAME="dbfsharp-${{ steps.version.outputs.version }}-${{ matrix.target_os }}-${{ matrix.arch }}"
          echo "name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "Archive name: $ARCHIVE_NAME"

      - name: Create Windows ZIP archive
        if: matrix.target_os == 'windows'
        run: |
          cd "./publish/${{ matrix.runtime }}"
          7z a "../../${{ steps.archive.outputs.name }}.zip" .

      - name: Create Unix TAR.GZ archive
        if: matrix.target_os != 'windows'
        run: |
          cd "./publish/${{ matrix.runtime }}"
          tar -czf "../../${{ steps.archive.outputs.name }}.tar.gz" .

      - name: Upload Windows artifact
        if: matrix.target_os == 'windows'
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: ${{ steps.archive.outputs.name }}.zip
          retention-days: 30

      - name: Upload Unix artifact
        if: matrix.target_os != 'windows'
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: ${{ steps.archive.outputs.name }}.tar.gz
          retention-days: 30

  notify-success:
    name: Notify Success
    needs: [build-executables]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "âœ… Successfully released DbfSharp Console v${{ steps.version.outputs.version }}"
          echo "ðŸ“¦ Binaries available at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
          echo "ðŸš€ NuGet package published to: https://www.nuget.org/packages/DbfSharp.Console/${{ steps.version.outputs.version }}"