name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: 'false'
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'DbfSharp.Console/DbfSharp.Console.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/TestResults/**/*.xml'

      - name: Upload coverage reports
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: '**/TestResults/**/coverage.cobertura.xml'

  build-executables:
    name: Build Executables
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target_os: windows
            arch: x64
            runtime: win-x64
            extension: .exe

          - target_os: windows
            arch: arm64
            runtime: win-arm64
            extension: .exe

          # macOS
          - target_os: macos
            arch: x64
            runtime: osx-x64
            extension: ''

          - target_os: macos
            arch: arm64
            runtime: osx-arm64
            extension: ''

          # Linux
          - target_os: linux
            arch: x64
            runtime: linux-x64
            extension: ''

          - target_os: linux
            arch: arm64
            runtime: linux-arm64
            extension: ''

          # Linux musl (Alpine)
          - target_os: linux-musl
            arch: x64
            runtime: linux-musl-x64
            extension: ''

          - target_os: linux-musl
            arch: arm64
            runtime: linux-musl-arm64
            extension: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-dev.${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Publish self-contained executable
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            --output "./publish/${{ matrix.runtime }}" \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -p:TrimMode=partial \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:DebugType=none \
            -p:DebugSymbols=false \
            -p:Version=${{ steps.version.outputs.version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
            -p:FileVersion=${{ steps.version.outputs.version }}

      - name: Create archive name
        id: archive
        run: |
          ARCHIVE_NAME="dbfsharp-${{ steps.version.outputs.version }}-${{ matrix.target_os }}-${{ matrix.arch }}"
          echo "name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          echo "Archive name: $ARCHIVE_NAME"

      - name: Create Windows ZIP archive
        if: matrix.target_os == 'windows'
        run: |
          cd "./publish/${{ matrix.runtime }}"
          7z a "../../${{ steps.archive.outputs.name }}.zip" .

      - name: Create Unix TAR.GZ archive
        if: matrix.target_os != 'windows'
        run: |
          cd "./publish/${{ matrix.runtime }}"
          tar -czf "../../${{ steps.archive.outputs.name }}.tar.gz" .
          
      - name: Upload Windows artifact
        if: matrix.os == 'windows'
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: ${{ steps.archive.outputs.name }}.zip
          retention-days: 30

      - name: Upload Unix artifact
        if: matrix.os != 'windows'
        uses: https://data.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: ${{ steps.archive.outputs.name }}.tar.gz
          retention-days: 30

  create-release:
    name: Create Release
    needs: [build-and-test, build-executables]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF#refs/tags/}
          else
            VERSION="0.0.0-dev.${GITHUB_SHA::8}"
            TAG_NAME="v$VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: $TAG_NAME"

      - name: Download all artifacts
        uses: https://data.forgejo.org/forgejo/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release-assets
          find ./artifacts -name "*.zip" -exec cp {} ./release-assets/ \;
          find ./artifacts -name "*.tar.gz" -exec cp {} ./release-assets/ \;
          ls -la ./release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.tag_name }}" | head -n1)
          
          # Generate changelog
          echo "## Changes" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.version.outputs.tag_name }} >> release_notes.md
          else
            echo "### Initial release" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "Choose the appropriate download for your platform:" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "- **Windows x64**: \`dbfsharp-${{ steps.version.outputs.version }}-windows-x64.zip\`" >> release_notes.md
          echo "- **Windows ARM64**: \`dbfsharp-${{ steps.version.outputs.version }}-windows-arm64.zip\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS" >> release_notes.md
          echo "- **macOS Intel (x64)**: \`dbfsharp-${{ steps.version.outputs.version }}-macos-x64.tar.gz\`" >> release_notes.md
          echo "- **macOS Apple Silicon (ARM64)**: \`dbfsharp-${{ steps.version.outputs.version }}-macos-arm64.tar.gz\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Linux" >> release_notes.md
          echo "- **Linux x64**: \`dbfsharp-${{ steps.version.outputs.version }}-linux-x64.tar.gz\`" >> release_notes.md
          echo "- **Linux ARM64**: \`dbfsharp-${{ steps.version.outputs.version }}-linux-arm64.tar.gz\`" >> release_notes.md
          echo "- **Linux x64 (musl/Alpine)**: \`dbfsharp-${{ steps.version.outputs.version }}-linux-musl-x64.tar.gz\`" >> release_notes.md
          echo "- **Linux ARM64 (musl/Alpine)**: \`dbfsharp-${{ steps.version.outputs.version }}-linux-musl-arm64.tar.gz\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. Download the appropriate archive for your platform" >> release_notes.md
          echo "2. Extract the archive" >> release_notes.md
          echo "3. Add the extracted folder to your PATH (optional)" >> release_notes.md
          echo "4. Run \`dbfsharp --help\` to get started" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Verification" >> release_notes.md
          echo "" >> release_notes.md
          echo "All releases are built using GitHub Actions and can be verified by checking the workflow run." >> release_notes.md
          
          # Set output for GitHub
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create or update release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag_name }}
          name: "DbfSharp Console v${{ steps.version.outputs.version }}"
          bodyFile: ${{ steps.release_notes.outputs.notes_file }}
          artifacts: "./release-assets/*"
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          allowUpdates: true
          generateReleaseNotes: false
          makeLatest: ${{ !contains(steps.version.outputs.version, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}

#  publish-nuget:
#    name: Publish NuGet Package
#    needs: [build-and-test]
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/v')
#    
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: ${{ env.DOTNET_VERSION }}
#
#      - name: Get version from tag
#        id: version
#        run: |
#          VERSION=${GITHUB_REF#refs/tags/v}
#          echo "version=$VERSION" >> $GITHUB_OUTPUT
#          echo "Version: $VERSION"
#
#      - name: Pack NuGet package
#        run: |
#          dotnet pack ${{ env.PROJECT_PATH }} \
#            --configuration Release \
#            --output ./nupkg \
#            -p:PackageVersion=${{ steps.version.outputs.version }} \
#            -p:AssemblyVersion=${{ steps.version.outputs.version }} \
#            -p:FileVersion=${{ steps.version.outputs.version }}
#
#      - name: Publish to NuGet.org
#        run: |
#          dotnet nuget push ./nupkg/*.nupkg \
#            --api-key ${{ secrets.NUGET_API_KEY }} \
#            --source https://api.nuget.org/v3/index.json \
#            --skip-duplicate
#        env:
#          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

#  update-homebrew:
#    name: Update Homebrew Formula
#    needs: [create-release]
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
#    
#    steps:
#      - name: Get version from tag
#        id: version
#        run: |
#          VERSION=${GITHUB_REF#refs/tags/v}
#          echo "version=$VERSION" >> $GITHUB_OUTPUT
#
#      - name: Update Homebrew formula
#        uses: dawidd6/action-homebrew-bump-formula@v3
#        with:
#          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
#          tap: your-org/homebrew-tap
#          formula: dbfsharp
#          tag: ${{ github.ref }}
#          revision: ${{ github.sha }}
#        continue-on-error: true

  notify-success:
    name: Notify Success
    needs: [create-release] #, publish-nuget]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "✅ Successfully released DbfSharp Console v${{ steps.version.outputs.version }}"
          echo "📦 Binaries available at: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
          echo "🚀 NuGet package published to: https://www.nuget.org/packages/DbfSharp.Console/${{ steps.version.outputs.version }}"